package ProjetGroupe_sequential; 

import eventb_prelude.*;
import Util.Utilities;

public class enter_P3{
	/*@ spec_public */ private ProjetGroupeR2 machine; // reference to the machine 

	/*@ public normal_behavior
		requires true;
		assignable \everything;
		ensures this.machine == m; */
	public enter_P3(ProjetGroupeR2 m) {
		this.machine = m;
	}

	/*@ public normal_behavior
		requires true;
 		assignable \nothing;
		ensures (\result <==> (new BSet<Integer>(new Integer(1),new Integer(2),new Integer(3),new Integer(4)).has(rame) && new BSet<Integer>(new Integer(1),new Integer(2)).has(origin) && machine.get_P3().apply(rame).equals(new Integer(0)) && ((origin.equals(new Integer(1))) ==> (!machine.get_S1ToP3().apply(new Integer(2)).equals(new Integer(0)))) && ((origin.equals(new Integer(2))) ==> (!machine.get_P2ToP3().apply(new Integer(2)).equals(new Integer(0)))) && ((origin.equals(new Integer(2)) && rame.equals(new Integer(1))) ==> (machine.get_P3A().apply(new Integer(2)).equals(machine.droite) && machine.get_P3A().apply(new Integer(1)).equals(machine.droite) && machine.get_P3A().apply(new Integer(0)).equals(machine.droite))) && ((origin.equals(new Integer(2)) && rame.equals(new Integer(2))) ==> (machine.get_P3A().apply(new Integer(2)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(1)).equals(machine.droite) && machine.get_P3A().apply(new Integer(0)).equals(machine.droite))) && ((origin.equals(new Integer(2)) && rame.equals(new Integer(3))) ==> (machine.get_P3A().apply(new Integer(3)).equals(machine.droite) && machine.get_P3A().apply(new Integer(1)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(0)).equals(machine.droite))) && ((origin.equals(new Integer(2)) && rame.equals(new Integer(4))) ==> (machine.get_P3A().apply(new Integer(3)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(1)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(0)).equals(machine.droite))) && ((origin.equals(new Integer(1)) && rame.equals(new Integer(1))) ==> (machine.get_P3A().apply(new Integer(2)).equals(machine.droite) && machine.get_P3A().apply(new Integer(1)).equals(machine.droite) && machine.get_P3A().apply(new Integer(0)).equals(machine.gauche))) && ((origin.equals(new Integer(1)) && rame.equals(new Integer(2))) ==> (machine.get_P3A().apply(new Integer(2)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(1)).equals(machine.droite) && machine.get_P3A().apply(new Integer(0)).equals(machine.gauche))) && ((origin.equals(new Integer(1)) && rame.equals(new Integer(3))) ==> (machine.get_P3A().apply(new Integer(3)).equals(machine.droite) && machine.get_P3A().apply(new Integer(1)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(0)).equals(machine.gauche))) && ((origin.equals(new Integer(1)) && rame.equals(new Integer(4))) ==> (machine.get_P3A().apply(new Integer(3)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(1)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(0)).equals(machine.gauche))) && machine.get_P3F().apply(rame).equals(machine.vert))) && (\exists BRelation<Integer,Integer> tmp_P2ToP3; BRelation.cross(new Enumerated(1,2),new BSet<Integer>(0,1,2)).has(tmp_P2ToP3) && BOOL.implication(machine.origin.equals(2),tmp_P2ToP3.equals(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,machine.P2ToP3.apply(1)),new Pair<Integer,Integer>(2,0)))); machine.P2ToP3.equals(tmp_P2ToP3)) && (\exists BRelation<Integer,Integer> tmp_S1ToP3; BRelation.cross(new Enumerated(1,2),new BSet<Integer>(0,1,2)).has(tmp_S1ToP3) && BOOL.implication(machine.origin.equals(1),tmp_S1ToP3.equals(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,machine.S1ToP3.apply(1)),new Pair<Integer,Integer>(2,0)))); machine.S1ToP3.equals(tmp_S1ToP3)) && (\exists BRelation<Integer,Integer> tmp_P2FS; BRelation.cross(new Enumerated(1,2),machine.trafficLights).has(tmp_P2FS) && BOOL.implication(machine.origin.equals(2),tmp_P2FS.equals(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,machine.P2FS.apply(1)),new Pair<Integer,Integer>(2,machine.vert)))) && BOOL.implication(,tmp_P2FS.equals(machine.P2FS)); machine.P2FS.equals(tmp_P2FS)) && (\exists BRelation<Integer,Integer> tmp_S1FS; BRelation.cross(new Enumerated(1,2),machine.trafficLights).has(tmp_S1FS) && BOOL.implication(machine.origin.equals(1),tmp_S1FS.equals(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,machine.S1FS.apply(1)),new Pair<Integer,Integer>(2,machine.vert)))) && BOOL.implication(,tmp_S1FS.equals(machine.S1FS)); machine.S1FS.equals(tmp_S1FS)); */
	public /*@ pure */ boolean guard_enter_P3( Integer origin, Integer rame) {
		return (new BSet<Integer>(new Integer(1),new Integer(2),new Integer(3),new Integer(4)).has(rame) && new BSet<Integer>(new Integer(1),new Integer(2)).has(origin) && machine.get_P3().apply(rame).equals(new Integer(0)) && BOOL.implication(origin.equals(new Integer(1)),!machine.get_S1ToP3().apply(new Integer(2)).equals(new Integer(0))) && BOOL.implication(origin.equals(new Integer(2)),!machine.get_P2ToP3().apply(new Integer(2)).equals(new Integer(0))) && BOOL.implication(origin.equals(new Integer(2)) && rame.equals(new Integer(1)),machine.get_P3A().apply(new Integer(2)).equals(machine.droite) && machine.get_P3A().apply(new Integer(1)).equals(machine.droite) && machine.get_P3A().apply(new Integer(0)).equals(machine.droite)) && BOOL.implication(origin.equals(new Integer(2)) && rame.equals(new Integer(2)),machine.get_P3A().apply(new Integer(2)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(1)).equals(machine.droite) && machine.get_P3A().apply(new Integer(0)).equals(machine.droite)) && BOOL.implication(origin.equals(new Integer(2)) && rame.equals(new Integer(3)),machine.get_P3A().apply(new Integer(3)).equals(machine.droite) && machine.get_P3A().apply(new Integer(1)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(0)).equals(machine.droite)) && BOOL.implication(origin.equals(new Integer(2)) && rame.equals(new Integer(4)),machine.get_P3A().apply(new Integer(3)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(1)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(0)).equals(machine.droite)) && BOOL.implication(origin.equals(new Integer(1)) && rame.equals(new Integer(1)),machine.get_P3A().apply(new Integer(2)).equals(machine.droite) && machine.get_P3A().apply(new Integer(1)).equals(machine.droite) && machine.get_P3A().apply(new Integer(0)).equals(machine.gauche)) && BOOL.implication(origin.equals(new Integer(1)) && rame.equals(new Integer(2)),machine.get_P3A().apply(new Integer(2)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(1)).equals(machine.droite) && machine.get_P3A().apply(new Integer(0)).equals(machine.gauche)) && BOOL.implication(origin.equals(new Integer(1)) && rame.equals(new Integer(3)),machine.get_P3A().apply(new Integer(3)).equals(machine.droite) && machine.get_P3A().apply(new Integer(1)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(0)).equals(machine.gauche)) && BOOL.implication(origin.equals(new Integer(1)) && rame.equals(new Integer(4)),machine.get_P3A().apply(new Integer(3)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(1)).equals(machine.gauche) && machine.get_P3A().apply(new Integer(0)).equals(machine.gauche)) && machine.get_P3F().apply(rame).equals(machine.vert));
	}

	/*@ public normal_behavior
		requires guard_enter_P3(origin,rame);
		assignable machine.P2ToP3, machine.S1ToP3, machine.P3, machine.P3F, machine.P2FS, machine.S1FS, machine.P3FS;
		ensures guard_enter_P3(origin,rame) && (\exists BRelation<Integer,Integer> tmp_P2ToP3; BRelation.cross(new Enumerated(1,2),new BSet<Integer>(0,1,2)).has(tmp_P2ToP3) && BOOL.implication(origin.equals(2),tmp_P2ToP3.equals(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,machine.get_P2ToP3().apply(1)),new Pair<Integer,Integer>(2,0)))); machine.get_P2ToP3().equals(tmp_P2ToP3)) && (\exists BRelation<Integer,Integer> tmp_S1ToP3; BRelation.cross(new Enumerated(1,2),new BSet<Integer>(0,1,2)).has(tmp_S1ToP3) && BOOL.implication(origin.equals(1),tmp_S1ToP3.equals(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,machine.get_S1ToP3().apply(1)),new Pair<Integer,Integer>(2,0)))); machine.get_S1ToP3().equals(tmp_S1ToP3)) &&  machine.get_P3().equals(\old((machine.get_P3().override(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(rame,2)))))) &&  machine.get_P3F().equals(\old((machine.get_P3F().override(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(rame,machine.rouge)))))) && (\exists BRelation<Integer,Integer> tmp_P2FS; BRelation.cross(new Enumerated(1,2),machine.trafficLights).has(tmp_P2FS) && BOOL.implication(origin.equals(2),tmp_P2FS.equals(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,machine.get_P2FS().apply(1)),new Pair<Integer,Integer>(2,machine.vert)))) && BOOL.implication(,tmp_P2FS.equals(machine.get_P2FS())); machine.get_P2FS().equals(tmp_P2FS)) && (\exists BRelation<Integer,Integer> tmp_S1FS; BRelation.cross(new Enumerated(1,2),machine.trafficLights).has(tmp_S1FS) && BOOL.implication(origin.equals(1),tmp_S1FS.equals(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,machine.get_S1FS().apply(1)),new Pair<Integer,Integer>(2,machine.vert)))) && BOOL.implication(,tmp_S1FS.equals(machine.get_S1FS())); machine.get_S1FS().equals(tmp_S1FS)) &&  machine.get_P3FS().equals(\old((machine.get_P3FS().override(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,machine.vert)))))); 
	 also
		requires !guard_enter_P3(origin,rame);
		assignable \nothing;
		ensures true; */
	public void run_enter_P3( Integer origin, Integer rame){
		if(guard_enter_P3(origin,rame)) {
			BRelation<Integer,Integer> P2ToP3_tmp = machine.get_P2ToP3();
			BRelation<Integer,Integer> S1ToP3_tmp = machine.get_S1ToP3();
			BRelation<Integer,Integer> P3_tmp = machine.get_P3();
			BRelation<Integer,Integer> P3F_tmp = machine.get_P3F();
			BRelation<Integer,Integer> P2FS_tmp = machine.get_P2FS();
			BRelation<Integer,Integer> S1FS_tmp = machine.get_S1FS();
			BRelation<Integer,Integer> P3FS_tmp = machine.get_P3FS();

		//machine.P2ToP3 = Utilities.non_det_assignment(P2ToP3_tmp,(BRelation.cross(new Enumerated(1,2),new BSet<Integer>(0,1,2)).has(P2ToP3_tmp) && BOOL.implication(origin.equals(2),P2ToP3_tmp.equals(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,P2ToP3_tmp.apply(1)),new Pair<Integer,Integer>(2,0))))));
		//machine.S1ToP3 = Utilities.non_det_assignment(S1ToP3_tmp,(BRelation.cross(new Enumerated(1,2),new BSet<Integer>(0,1,2)).has(S1ToP3_tmp) && BOOL.implication(origin.equals(1),S1ToP3_tmp.equals(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,S1ToP3_tmp.apply(1)),new Pair<Integer,Integer>(2,0))))));
			machine.set_P3((P3_tmp.override(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(rame,2)))));
			machine.set_P3F((P3F_tmp.override(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(rame,machine.rouge)))));
		//machine.P2FS = Utilities.non_det_assignment(P2FS_tmp,(BRelation.cross(new Enumerated(1,2),machine.trafficLights).has(P2FS_tmp) && BOOL.implication(origin.equals(2),P2FS_tmp.equals(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,P2FS_tmp.apply(1)),new Pair<Integer,Integer>(2,machine.vert)))) && BOOL.implication(,P2FS_tmp.equals(P2FS_tmp))));
		//machine.S1FS = Utilities.non_det_assignment(S1FS_tmp,(BRelation.cross(new Enumerated(1,2),machine.trafficLights).has(S1FS_tmp) && BOOL.implication(origin.equals(1),S1FS_tmp.equals(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,S1FS_tmp.apply(1)),new Pair<Integer,Integer>(2,machine.vert)))) && BOOL.implication(,S1FS_tmp.equals(S1FS_tmp))));
			machine.set_P3FS((P3FS_tmp.override(new BRelation<Integer,Integer>(new Pair<Integer,Integer>(1,machine.vert)))));

			System.out.println("enter_P3 executed origin: " + origin + " rame: " + rame + " ");
		}
	}

}
